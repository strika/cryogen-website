<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title>There are ants on the page</title><link href="http://nebojsa.stricevic.info/atom.xml" rel="self" /><link href="http://nebojsa.stricevic.info" /><updated></updated><id>http://nebojsa.stricevic.info</id><author><name>@nstricevic</name></author><entry><title>Rake and Rails environment</title><link>http://nebojsa.stricevic.info/2014/02/rake-and-rails-enviroment.html</link><updated>2014-02-02T00:00:00</updated><id>http://nebojsa.stricevic.info/2014/02/rake-and-rails-enviroment.html</id><content type="html">&lt;p class=&quot;paragraph&quot;&gt;I've been using Rake daily for more than 2 years now,
   but I never went through a proper tutorial about Rake.
   Lately, I learned few basic things about Rake that made
   task dependency much more clear.&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;Simplest way to define a rake task is this:&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;task :my_task do
  # do some stuff
end&lt;/pre&gt;&lt;br /&gt;&lt;p class=&quot;paragraph&quot;&gt;If you need to run :prepare task before :my_task, this
   is the way to do it:&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;task :my_task =&amp;gt; :prepare do
  # do some stuff
end&lt;/pre&gt;&lt;br /&gt;&lt;p class=&quot;paragraph&quot;&gt;And when you need to run several tasks before :my_task, you
   can use an array:&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;task :my_task =&amp;gt; [:clean, :prepare, :setup_logging] do
  # do some stuff
end&lt;/pre&gt;&lt;br /&gt;&lt;p class=&quot;paragraph&quot;&gt;Rake is using Ruby's flexible syntax to create a comfortable DSL for writing tasks
   (that may look strange at first).&lt;/p&gt;&lt;h2&gt;Rails' :environment task&lt;/h2&gt;&lt;p class=&quot;paragraph&quot;&gt;A special task that you probably encountered before is the :environment task:&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;task :my_task =&amp;gt; :environment do
  # do some stuff
end&lt;/pre&gt;&lt;br /&gt;&lt;p class=&quot;paragraph&quot;&gt;The :environment task loads the Rails' environment so all you code and gems are available
   in :my_task.&lt;/p&gt;&lt;h2&gt;When not to use :environment task&lt;/h2&gt;&lt;p class=&quot;paragraph&quot;&gt;If you're writing a task that needs to be executed periodically, in short
   intervals and doesn't depend on lots of other code, don't use :environment task.
   Load dependencies manually instead. Running a task that depends on :environment
   can take 20-30 seconds or more since it's starting the whole Rails and loading
   all gems for the environment.&lt;/p&gt;</content></entry><entry><title>Who is John McCarthy?</title><link>http://nebojsa.stricevic.info/2014/01/john-mccarthy.html</link><updated>2014-01-05T00:00:00</updated><id>http://nebojsa.stricevic.info/2014/01/john-mccarthy.html</id><content type="html">&lt;p class=&quot;paragraph&quot;&gt;Few years ago I was a teaching assistant on University of Novi Sad. I was teaching an introduction to software engineering and design patterns. Students were just a couple of years younger than me.&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;One day I said to a class that John McCarthy died yesterday. One of students asked &quot;Who?&quot; and soon I realized that no one in the room new who John McCarthy is &lt;a href=&quot;#1&quot;&gt;[1]&lt;/a&gt;. That made me sad. Shouldn't they know?&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;John McCarthy was computer scientist that developed Lisp programming language &lt;a href=&quot;#2&quot;&gt;[2]&lt;/a&gt;, godfather of artificial intelligence and AI researcher. For his contributions to computer science he received many honors, including Turing Award and Kyoto Prize.&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;It seams there is a shortage of computer science history classes on universities. And shortage of curiosity for the field history among students and practitioners, as well.&lt;/p&gt;&lt;p&gt;&lt;span id=&quot;1&quot;&gt;[1] &lt;a href=&quot;https://en.wikipedia.org/wiki/John_McCarthy_%28computer_scientist%29&quot;&gt;John McCarthy on Wikipedia&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;2&quot;&gt;[2] &lt;a href=&quot;https://en.wikipedia.org/wiki/Lisp_%28programming_language%29&quot;&gt;Lisp on Wikipedia&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;</content></entry><entry><title>Maximize Firefox window in a Cucumber Selenium scenario</title><link>http://nebojsa.stricevic.info/2013/12/maximize-firefox-window-in-cucumber.html</link><updated>2013-12-27T00:00:00</updated><id>http://nebojsa.stricevic.info/2013/12/maximize-firefox-window-in-cucumber.html</id><content type="html">&lt;p class=&quot;paragraph&quot;&gt;This is one of those &quot;can't make this scenario pass&quot; war stories.&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;The other day I was working on a piece of code that's using jQuery UI
   draggable and droppable interactions. And I just couldn't make the scenario
   pass. But I also couldn't stop working on it. One of reasons was that there was very
   similar scenario already passing.&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;Scenarios were using Capybara's &lt;a href=&quot;http://rubydoc.info/github/jnicklas/capybara/master/Capybara/Node/Element:drag_to&quot;&gt;#drag_to&lt;/a&gt; method that makes testing drag and drop a breeze.
   After couple of hours of debugging and moving stuff around, I saw something
   interesting in the Firefox window that runs the test - during the drag and drop
   execution scroll bar moves.&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;The thing is that Firefox window was small. After drag started, small scrolling happened 
   to reveal the drop target. To make the scenario pass I had to make both the drag node and
   the drop node visible from the start.&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;Final solution was to maximize Firefox window just before drag is initiated:&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;# in a step definition
page.driver.browser.manage.window.maximize&lt;/pre&gt;&lt;br /&gt;&lt;p class=&quot;paragraph&quot;&gt;Sometimes it pays off to follow how a test is executed in a browser window.
   And for some tests you really need to start &quot;thinking&quot; like a machine to
   understand what's going on inside a test.&lt;/p&gt;</content></entry><entry><title>Hello World</title><link>http://nebojsa.stricevic.info/2013/12/hello-world.html</link><updated>2013-12-13T00:00:00</updated><id>http://nebojsa.stricevic.info/2013/12/hello-world.html</id><content type="html">&lt;p class=&quot;paragraph&quot;&gt;Launching the site...&lt;/p&gt;&lt;p class=&quot;paragraph&quot;&gt;3... 2... 1...&lt;/p&gt;</content></entry></feed>